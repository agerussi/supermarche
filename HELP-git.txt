Deux sites du même auteur pour choper les bases:
===============================================
* version courte: http://gitref.org
* version longue: http://git-scm.com/doc 
On peut ensuite télécharger le GitHub Cheat Sheet (https://training.github.com/kit/downloads/github-git-cheat-sheet.pdf) qui contient les principales commandes, et visionner la version interactive très instructive (http://ndpsoftware.com/git-cheatsheet.html)

TUTO: Configurer Git à la fac
=============================
Dans votre répertoire principal, créer un fichier .gitconfig contenant:
TO BE CONTINUED

TUTO: WorkFlow principal pour les débutants:
============================================
1) cloner le projet (une fois pour toutes a priori)
$ git clone https://github.com/agerussi/supermarche.git
Ceci va créer le répertoire 'supermarche' qui contient le projet

2) créer sa branche perso et y aller:
$ git checkout -b <prenom>    # <prenom>=raissa, congcong, ou khalil

3) à partir de là vous pouvez modifier les fichiers existants, ou en créer de nouveaux.
Ce qu'il faut savoir c'est que les fichiers peuvent avoir 3 status différents sous git:
  a) le fichier n'est pas pris en compte du tout (souhaitable en général pour les fichiers produits à partir d'autres, comme les binaires, les .bak, .log etc)
  b) le fichier est pris en compte mais ne sera pas inclus dans le prochain commit
  c) le fichier sera inclus dans le prochain commit
(on peut voir le status des fichiers avec git status)
En conséquence: à chaque fois que vous créez un NOUVEAU fichier ou répertoire, il faut l'ajouter:
$ git add <fichier>  # fait passer du status a) au status c)
Pour faire passer de b) à c) on peut aussi utiliser git add mais en général on utilise une option du commit qui va automatiquement inclure tous les fichiers b) vers c) (voir ci-dessous)

4) dès qu'on a fait quelques changements significatifs, on les commet:
$ git commit -a
(le -a dit qu'il faut inclure aussi les fichiers de type b), sinon seuls les c) seront inclus)
git permet alors de taper un petit message qui explique brièvement les changements effectués.

5) on recommence l'étape 3 et 4 autant de fois que nécessaire.
Conseil: faites des commits souvent, n'attendez pas d'avoir révolutionné l'appli pour faire un commit.
Si vous voulez renommer ou effacer un fichier:
$ git mv ....
$ git rm ....

6) pour faire remonter votre branche sur le serveur (afin que les autres puissent voir vos changements):
$ git push origin <nom de votre branche>
Puis envoyer un mail pour prévenir les autres, qui pourront alors voir et intégrer vos changements aux leurs.
Voilà les bases pour contribuer.

TUTO: incorporer les changements des autres dans votre branche
==============================================================
Dans git, c'est toujours vous-même qui allez chercher les changements des autres, et non les autres qui changent votre version.
Quand quelqu'un (par exemple francois) vous annonce qu'il a fait du bon boulot, il est temps d'incorporer ses changements chez vous.
1) on récupère l'ensemble des changements (sans rien incorporer):
$ git fetch origin francois

2) on peut se faire une idée de l'évolution de l'historique avec:
$ git log --oneline --decorate --graph

3) on peut aller voir les changements de francois:
$ git checkout origin/francois  (il faut n'avoir aucun changement en cours dans sa branche)
Puis on revient dans sa branche:
$ git checkout <prenom>

4) on décide (ou pas...) d'incorporer les changements de francois dans sa branche:
$ git merge origin/francois
Si tout se passe bien, git synchronise tout automatiquement.
Sinon, il marque dans les fichiers les points de conflits, il faut les résoudre à la main, puis refaire un commit.
That's all.

5) Astuce1: pour ceux qui ont peur de bousiller leur branche:
5.1) on fait une nouvelle branche (tmp) et on y va:
$ git checkout -b tmp

5.2) on fait le merge dedans:
$ git merge origin/francois

5.3) une fois qu'on est content, on merge tmp dans sa branche perso:
$ git checkout <prenom>
$ git merge tmp

5.4) on peut effacer la branche temporaire:
$ git branch -d tmp

6) Astuce 2: pour faire "fetch+merge" en même temps:
$ git pull origin/francois

Principales commandes pour travailler EN LOCAL:
===============================================
> pour voir les fichiers nouveaux/modifiés:
$ git status

> pour que git suive de nouveaux fichiers, ou pour inclure des fichiers modifiés dans le prochain commit:
$ git add <fichier> <rep> <fichier>... 

> pour "commettre" les derniers changements déclarés par git add (dans la branche actuelle):
$ git commit

> pour inclure tous les derniers fichiers modifiés ET commettre en même temps:
$ git commit -a

> pour voir l'historique des derniers commit de la branche courante:
$ git log

> pour voir les branches et dans quelle branche on se trouve:
$ git branch
$ git branch -a  (affichera aussi les branches distantes)

> pour créer une nouvelle branche (basée sur la branche actuelle):
$ git branch <nom de la branche>

> pour changer de branche (il faut que les derniers changements aient été commis):
$ git checkout <nom de la branche>

> pour créer une nouvelle branche ET y aller directement:
$ git checkout -b <nom de la branche>

TO BE CONTINUED...

Principales commandes pour transferts sur le SERVEUR /!\
========================================================
Pour aller récupérer tous les changements mais sans aucun merge (avec des remote branches):
> git fetch
A partir de là vous pouvez faire des merges dans votre propre branche, ou examiner les changements relatifs (git diff <branche>)
PS: le petit outil Linux 'gitg' permet une bonne visu graphique des branches/changements/etc.

Si quelqu'un vous dit qu'il a fait un super boulot vous pouvez directement faire le merge dans votre branche:
> git pull origin <son prénom>

Quand vous avez fait des commits dans votre branche, vous remontez les changements:
> git push origin <votre branche>
et ensuite vous envoyez un mail si vos changements demandent des commentaires particuliers,
et comme ça les autres iront pull-er votre boulot.
TO BE CONTINUED...
